{
    "componentChunkName": "component---src-components-blog-post-jsx",
    "path": "/blog/tips-for-debugging-software-like-a-detective/",
    "result": {"data":{"site":{"siteMetadata":{"author":"Monica Powell","siteUrl":"https://www.aboutmonica.com"}},"mdx":{"id":"bca9498b-bd4e-525e-867a-4c001b45732f","timeToRead":4,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tips for Debugging Software like a Detective\",\n  \"date\": \"2021-05-15T15:35:06.571Z\",\n  \"template\": \"post\",\n  \"draft\": true,\n  \"slug\": \"tips-for-debugging-software-like-a-detective\",\n  \"category\": [\"reflection\"],\n  \"featured\": true,\n  \"description\": \"An overview of strategic ways software engineers can approach debugging software.\",\n  \"tags\": [\"software\", \"developer productivity\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Tweet = makeShortcode(\"Tweet\");\nvar Callout = makeShortcode(\"Callout\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Being an effective web developer when investigating a software issue, locally or in production, requires some detective-like debugging skills. As I've grown as a developer I've not only improved the breadth of my knowledge about various ways software can break in unexpected ways but I've also enhanced my debugging skills over time.\"), mdx(Tweet, {\n    tweetLink: \"indigitalcolor/status/1392464056011866114?s\",\n    mdxType: \"Tweet\"\n  }), mdx(\"p\", null, \"In this article, I share a longer-form version of the above Twitter thread which highlights some of my thoughts on various ways to approach understanding why the computer doesn't appear to be doing what you tell it to do. Computers interpret instructions literally and to resolve a discrepancy between actual and expected functionality you may need to revisit your assumptions!\"), mdx(Callout, {\n    mdxType: \"Callout\"\n  }, \" \", \"Software engineers can hold a lot of ill-informed assumptions or falsehoods which can lead to subpar handling of \\\"edge cases\\\" like assuming a user's name is permanent or that a name must by X characters or that a name is only structured as first name, middle name, last name when in reality that is not a universal fact. Check out \", mdx(\"a\", {\n    href: \"https://github.com/kdeldycke/awesome-falsehood\"\n  }, \"awesome-falsehood\"), \" if you'd like to learn more about common falsehoods that engineers believe about things like time, names, addresses, and more.\", \" \"), mdx(\"p\", null, \"If an issue seems to be isolated to my local environment and has gone from working to not working without any notable software changes I may try \\\"turning it on and off again\\\" by trying some of the following: rebuilding database, doing a fresh install of node_modules, restarting docker or your computer, etc. But what do you do when just turning it on and off again doesn\\u2019t resolve the issue?\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Run linting and read any errors\"), \" Is there a blaring syntax error? Is your code referencing an undefined variable? More times than I care to admit my code wasn't compiling locally because there was a rouge letter 'f' that I somehow added to a random line. This misplaced char is often picked up by my linting but if I do want to manually skim my changes since the app successfully compiled then I will use the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\"\n  }, \"VSCode Git Lens Integration\"), \" to see if anything stands out as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"off\"), \" with my changes. Similar to linting errors, if there are other errors in your terminal, browser console, or webpage that are appearing when your app fails to compile or under the unexpected condition they can help guide your search to figure out what is going wrong. When I first was learning how to program, I more so stared \\uD83D\\uDE33 at error messages instead of reading them. If you're still getting comfortable with error messages check out \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://nickymeuleman.netlify.app/blog/love-errors\"\n  }, \"Nicky Meuleman tips on learning to appreciate errors\"), \".\")), mdx(\"p\", null, \"2.\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Only change one thing at a time\"), \". It can be tempting to change everything at once. But try just changing one thing and before you change it think through how that one change will help you confirm or reject your current assumptions of the problem and ultimately help you further your understanding and bring you closer to a potential solution. Automated tests can be helpful to confirm how changes work under different test cases and to ensure as you progress through the problem you don't unknowingly break preexisting test cases that were previously passing.\"), mdx(\"p\", null, \"3.\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Confirm all of your assumptions.\"), \" Consistently reproduce the issue manually or with tests. Under what conditions does the system fail? To better understand an underlying issue you should determine what conditions it behaves unexpectedly in. Using logs, breakpoints, tests, check network calls, etc to sort out when it fails will get you closer to understanding why it's not working as expected. Is your API actually returning the data you expect? Is it an environment-specific issue? Are there missing environment variables?\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Lean on tests to automate confirming your assumptions and testing potential solutions\"), \" Approaching development with a red-green refactor development approach of defining desired functionality in test, implementing code to make the test go from red to green, and then refactoring without having to worry about unknowingly breaking the desired functionality. This approach prevents building out too much of a feature without testing its functionality and if bugs are resolved in a test-driven way then that means that if a similar regression is made in the future in the codebase that there will be a clear failing test warning future developers that something is amiss. Git also has command, bisect which can be used to quickly find a problematic commit, by strategically checking out specific commits from the git history and then based on whether or not that commit is identified as being before or after the software regression was introduced then the next commit is either earlier or later in the git history until the culprit can be identified. Git bisect can be combined with automated testing to make the process of identifying the problematic commit even more efficient.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Walk through your code line by line\"), \". Try to read it with fresh eyes even if that means taking a 5 min break and revisiting. I'm always amazed how sleeping on a problem that stumped me usually makes a lot more sense in the morning. It's definitely possible for your mind to continue working through a problem even when you are not directly in front of a screen.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Look at the source code of the third-party package.\"), \" check for open issues. If the error may be related to third-party software look at its source code. I\\u2019ve looked at React, misc. packages with types, Webmention, etc on GitHub to better understand their functionality and find relevant open issues. Oftentimes others may have encountered a similar issue.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Google is your best friend\"), \" A quick search can be a developer\\u2019s best friend. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Are you using a new function or package? Can you find an example where it's working?\"), \" If you want to see code that uses the same APIs in context then recommend searching your local repo or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://grep.app\"\n  }, \"https://grep.app\"), \" to search open source repos.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Phone a friend.\"), \" I recommend integrating git blame into your development environment I use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gitlens.amod.io/\"\n  }, \"Git lens\"), \" plugin which shows you, directly within files in a code editor, who authored certain file changes and the PR which can be helpful for quickly getting more context regarding decisions by looking at the associated Pull Request or having the opportunity to connect directly with the committer. Pair programming can be an effective way to debug and share knowledge. Similar, to the magic of figuring out the solution to a bug in the shower or overnight there is a phenomenon called rubber ducky debugging in which just explaining the issue to someone else (even an inanimate rubber duck) can help make the solution more obvious.\"))), mdx(\"p\", null, \"Once you\\u2019ve sorted out a gnarly or even an \\\"obvious\\\" in hindsight bug remember to document your learnings. Even if it\\u2019s just a quick note for your future self.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"frontmatter":{"title":"Tips for Debugging Software like a Detective","date":"May 15, 2021","description":"An overview of strategic ways software engineers can approach debugging software.","tags":["software","developer productivity"]}},"allWebMentionEntry":{"edges":[]}},"pageContext":{"permalink":"https://www.aboutmonica.com/blog/tips-for-debugging-software-like-a-detective/","slug":"/blog/tips-for-debugging-software-like-a-detective/","prev":{"id":"e804376e-e560-565e-9b80-2dcd3c35d507","frontmatter":{"title":"What is Storybook & How to Use It to Create a React Component Library","category":null,"date":"2021-08-18T13:19:10.285Z","slug":null,"tags":["ExternalLink"],"redirects":null},"fields":{"slug":"/blog/undefined/"}},"next":{"id":"f0d227c4-942d-5965-b99a-fc9b9c466390","frontmatter":{"title":"Setting Up Shell with zsh and Autosuggestions","category":["tutorial"],"date":"2021-05-14T13:12:21.580Z","slug":"setting-up-zsh-with-autosuggestions","tags":["terminal","developer productivity"],"redirects":null},"fields":{"slug":"/blog/setting-up-zsh-with-autosuggestions/"}}}},
    "staticQueryHashes": ["1977783444","764694655"]}